#!/usr/bin/env node

var pathExtra = require('path-extra');
var program = require('commander');

var cozyLight = require('../lib/cozy-light');
var config = require('../lib/config');
var actions = cozyLight.actions;

var pkg = require('../package.json');


/**
 * Helpers to init cozyLight data before running given action
 */
var buildAction = function (action) {
  return function() {
    program = null;
    for (arg in arguments) {
      if (arguments[arg].commands !== undefined) program = arguments[arg];
    }
    cozyLight.init(program);
    action.apply(action, arguments);
  }
};


// Configure CLI

program
  .version(pkg.version);

// Initialize Cozy

program
  .command('start')
  .option('-p, --port <port>', 'port number on which Cozy Light will listen')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('start Cozy Light server')
  .action(buildAction(actions.start));

program
  .command('install <app>')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Add app to current Cozy Light')
  .action(buildAction(actions.installApp));

program
  .command('uninstall <app>')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Remove app from current Cozy Light')
  .action(buildAction(actions.uninstallApp));

program
  .command('add-plugin <plugin>')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Add plugin to current Cozy Light')
  .action(buildAction(actions.installPlugin));

program
  .command('remove-plugin <plugin>')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Remove plugin from current Cozy Light')
  .action(buildAction(actions.uninstallPlugin));

program
  .command('display-config')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Display current config of Cozy Light')
  .action(buildAction(actions.displayConfig));

program
  .command('enable <apporplugin>')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Enable given disabled app or plugin')
  .action(buildAction(actions.enable));

program
  .command('disable <apporplugin>')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description('Disable given app or plugin')
  .action(buildAction(actions.disable));
  
program
  .command('install-distro [distro]')
  .option('-h, --home <home>',
          'home directory where Cozy Light runs (default: ~/.cozy-light)')
  .description(
    'Install given distro. If none is give, it displays the distro list')
  .action(buildAction(actions.installDistro));

program
  .command('*')
  .description('display help')
  .action(function(){
    program.outputHelp();
    cozyLight.stop(cozyLight.exit);
  });

// Run CLI

program.parse(process.argv);

// If arguments doesn't match any of the one set, it displays help.

if (!process.argv.slice(2).length) {
  program.outputHelp();
}

// Manage errors

process.on('uncaughtException', function(err){
  if (err) {
    cozyLight.logger.warn('An exception is uncaught');
    cozyLight.logger.raw(err);
    cozyLight.logger.raw(err.stack);
  }
  cozyLight.stop(cozyLight.exit);
});

// Manage termination

process.on('SIGINT', function(){
  cozyLight.stop(cozyLight.exit);
});
