#!/usr/bin/env node

var http = require('http');
var fs = require('fs');
var fsExtra = require('fs-extra');
var pathExtra = require('path-extra');
var program = require('commander');
var npm = require('npm');
var request = require('request-json-light');
var express = require('express');
var morgan = require('morgan');
var async = require('async');
var printit = require('printit');
var Pouchdb = require('pouchdb');
var httpProxy = require('http-proxy');
var pkg = require('./package.json');


// Helpers


var configHelpers = {

  /**
  * Add a new application to the configuration file. The configuration file is
  * written in JSON. It adds an entry to the apps field. Name, display name,
  * version and description are required.
  *
  * @param {String} app The app name as it's typed by the user (user/repo).
  * @param {String} manifest Manifest containing application fields.
  */
  addApp: function (app, manifest) {
    config.apps[app] = {
      name: manifest.name,
      displayName: manifest.displayName,
      version: manifest.version,
      description: manifest.description
    };
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  },

  /**
  * Add a new application to the configuration file. The configuration file is
  * written in JSON. It adds an entry to the apps field. Name, display name,
  * version and description are required.
  *
  * Config file is ~/.cozy-light/.config
  *
  * @param {String} app The app name as it's typed by the user (user/repo).
  * @param {String} manifest Manifest containing application fields.
  */
  removeApp: function (app, manifest) {
      delete config.apps[app];
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  },

  /*
   * Go to the HOME folder ~/.cozy-light then start the command line tool.
   */
  createHome: function () {
    fsExtra.mkdirsSync(HOME);
    process.chdir(HOME);
  },
 
  /*
   * Create config file if it doesn't exist
   */
  createConfigFile: function () {
    var exists = fs.existsSync(CONFIG_PATH);
    if (!exists) {
      var config = { apps: {} }
      fs.writeFileSync(CONFIG_PATH, JSON.stringify(config));
    };
  },

  /*
   * Copy given dependency to app folder to avoid apps to fetch and rebuild it
   * every time it's required as dependency.
   * Most dependencies are common and can be reused.
   */
  copyDependency: function (name) {
    var destPath = pathExtra.join(HOME, 'node_modules', name);
    var sourcePath = pathExtra.join(__dirname, 'node_modules', name);

    if(!fs.existsSync(destPath)) {
      fsExtra.copySync(sourcePath, destPath);
    };
  }
};


var npmHelpers = {

  /**
  * Fetch given app source and dependencies from NPM registry.
  *
  * Config file is ~/.cozy-light/.config
  *
  * @param {String} app App to fetch from NPM.
  * @param {Function} manifest Callback to run once work is done.
  */
  install: function (app, callback) {
    npm.load({}, function () {
      npm.commands.install(HOME, [app], callback);
    });
  },

  /**
  * Remove application source and dependencies using NPM lib.
  *
  * @param {String} app App to fetch from NPM.
  * @param {Function} manifest Callback to run once work is done.
   */
  uninstall: function (app, callback) {
    module = config.apps[app].name;
    npm.load({}, function () {
      npm.commands.uninstall([module], callback);
    });
  }
};


var serverHelpers = {

  /*
   * Configure properly proxy: handle errors and websockets.
   *
   * @param {Object} server Express server.
   */
  initializeProxy: function (server) {

    proxy.on('error', function (err, req, res) {
      res.send(err, 500);
    });

    server.on('upgrade', function (req, socket, head) {

      function proxyWS(port) {
        proxy.ws(req, socket, head, {
          target: "ws://localhost:" + port,
          ws: true
        });
      };

      function fail(err) {
        if (err != null) {
          LOGGER.error(err);
        }
        LOGGER.error("Socket unauthorized");
        socket.end("HTTP/1.1 400 Connection Refused \r\n" + 
                   "Connection: close\r\n\r\n", 'ascii');
      };

      req.originalUrl = req.url;

      var publicOrPrivate = '';
      var slug = '';

      var urlParts = req.url.split('/');
      if(urlParts.length === 3) {
        publicOrPrivate = urlParts[1];
        slug = urlParts[2];
      }

      if (publicOrPrivate === 'public') {
        req.url = req.url.replace("/public/" + slug, '/public');
        proxyWS(routes[slug]);

      } else if (publicOrPrivate === 'apps') {
        req.url = req.url.replace("/apps/" + slug, '');
        proxyWS(routes[slug]);

      } else {
        proxyWS(process.env.DEFAULT_REDIRECT_PORT);
      }
    });

    return proxy;
  },

  /*
   * Create dashboard application server. 
   */
  createApplicationServer: function () {
    app = express()

    app.use(express.static(pathExtra.join(__dirname, 'assets'),
            { maxAge: 86400000 }));
    app.use(morgan('combined'));

    app.get('/', controllers.index);

    app.all('/apps/:name/*', controllers.proxyPrivate);
    app.all('/apps/:name*', controllers.proxyPrivate);

    app.all('/public/:name/*', controllers.proxyPublic);
    app.all('/public/:name*', controllers.proxyPublic);

    return app;
  },

  startApplication: function (application, db, callback) {
    var name = application.name;
    var script = pathExtra.join(HOME, 'node_modules', name);
    var module = null;

    try {
      module = require(script);
    } catch(err) {
      console.log(err);
    }

    if (module === null) {
      LOGGER.error("Can't load application " + name + ".");
      callback();
    } if (module.start === undefined) {
      LOGGER.error("Can't start application " + name + ".");
      callback();
    } else {
      module.start({db: db, port: port}, function (app, server) {
        routes[name] = port;
        LOGGER.info('Application ' + name + ' is now running on port ' + 
                 port + '...');
        port = port + 1;
        callback();
      });
    };
  }
};


// Express app controllers

var controllers = {
  
  /*
   * Render front page and list available applications.
   */
  index: function (req, res, next) {

    var config = require(CONFIG_PATH);
    var memoryUsage = process.memoryUsage();
    memoryUsage = Math.ceil(memoryUsage.heapUsed / 1000000);

    var template = ' \
    <html> \
    <head> \
        <meta http-equiv="content-type" content="text/html; charset=utf-8"> \
        <title>Cozy Light: Your Personal Cloud at Home</title> \
        <style type="text/css" media="screen"> \
          @font-face { \
            font-family: mavenpro; \
            src: url(maven-pro-light-200.otf); \
          } \
 \
          @font-face { \
            font-family: signika; \
            src: url(signika-light.ttf); \
          } \
 \
          body { \
            font-family: mavenpro; \
            padding: 20px; \
          } \
 \
          h1 { \
            margin-top: 0; \
            font-weight: normal; \
            font-size: 36px; \
          } \
          h2 { \
            font-weight: normal; \
            margin-top: 60px; \
          } \
 \
          .logo { \
            float: left;  \
            margin-right: 20px; \
          } \
 \
          .app-line { \
            text-transform: uppercase; \
            font-size: 16px; \
          } \
 \
          a { \
            font-weight: bold; \
            Text-decoration: none; \
            color: black; \
          } \
          a:hover { \
            color: orange; \
          } \
          a:visited { \
            color: black; \
          } \
 \
          } \
          .app-line span { \
            font-family: signika \
            text-transform: normal; \
            font-size: 14px; \
          } \
        </style> \
    </head> \
    <body> \
    <a href="http://cozy.io" target="_blank"> \
    <img class="logo" src="happycloud.png" /> \
    </a>  \
    <h1>Cozy Light</h1> \
    <h2>Your applications</h2> \
    ';

    if (Object.keys(config.apps).length > 0) {
      Object.keys(config.apps).forEach(function (key) {
        var app = config.apps[key];
        var name = app.name;
        template += '<p class="app-line"><a href="apps/' + 
                    name + '/" target="_blank">' 
        template += app.displayName + '</a><span>&nbsp;(' + 
                    app.version + ')</span></p>'
      });
    } else {
      template += '<em>no application installed.</em>'
    }

    template += '<h2>Resources</h2><p>Occupied memory:&nbsp;' + 
                memoryUsage +  'MB</p>'

    template += ' \
    </body> \
    </html> \
      ';
    res.send(template);
  },

  /*
   * Proxy requests targeting apps.
   */
  proxyPrivate: function (req, res, next) {
    var appName = req.params.name
    var port = routes[appName];
    req.url = req.url.substring(("/apps/" + appName).length);
    if (port !== null) {
      proxy.web(req, res, { target: "http://localhost:" + port });
    } else {
      res.send(404);
    }
  },
  
  /*
   * Proxy requests targeting apps public path.
   */
  proxyPublic: function (req, res, next) {
    var appName = req.params.name
    var port = routes[appName];
    req.url = "/public" + req.url.substring(("/public/" + appName).length);
    if (port !== null) {
      proxy.web(req, res, { target: "http://localhost:" + port });
    } else {
      res.send(404);
    }
  }

}


// Actions

var actions = {
  
  /*
   * Get all installed app modules. Expect that a start function is available,
   * then run the app server on given port. Ports are expected to be available.
   */
  start: function () {
    app = serverHelpers.createApplicationServer(); 

    var db = new Pouchdb('cozy');

    async.eachSeries(Object.keys(config.apps), function (key, callback) {
      var application = config.apps[key];
      serverHelpers.startApplication(application, db, callback);
    }, function (err) {
      if(err) { LOGGER.error(err); }
      server = app.listen(DEFAULT_PORT, function () {
        LOGGER.info('Cozy Light Dashboard is running on port 19104...');
      });
      serverHelpers.initializeProxy(server);
    });
  },

  /*
  * App names correspond to Github repo. An app name is composed of a user name
  * and a repository name.
  * Installation starts by fetching the manifest from the repostiory
  * (package.json located at the root). Then it installs sources and
  * dependencies in the cozy-light folder.
  *
  * @param {String} app App to install (ex: cozy-labs/calendar).
  */
  installApp: function (app){
    var client = request.newClient( 'https://raw.githubusercontent.com/');
    var manifestUrl = app + '/master/package.json';

    LOGGER.info('Installing application ' + app + '...');
    client.get(manifestUrl, function (err, res, manifest) {
      if (err) {
        LOGGER.info(err);
        LOGGER.info('Cannot find given app manifest. Make sure it lives on ' +
                 'Github');
      } else {
        configHelpers.addApp(app, manifest);
        npmHelpers.install(app, function (err) {
          if (err) {
            LOGGER.raw(err);
            LOGGER.error(app + ' installation failed.');

          } else {
            LOGGER.info(app + ' installed. Enjoy!');
          };
        });
      };
    });
  },

  /*
  * Remove app from config and its source from node module folder.
  *
  * @param {String} app App to uninstall.
  */
  uninstallApp: function (app){
    LOGGER.info('Uninstalling ' + app + '...');
    if(config.apps[app] === undefined) {
      LOGGER.error(app + ' is not installed.');
    } else {
      npmHelpers.uninstall(app, function () {
        LOGGER.info(app + ' successfully uninstalled.');
        configHelpers.removeApp(app);
      });
    }
  },

  /*
  * Display configuration file contents: apps configuration and user settings.
  */
  displayConfig: function () {
    console.log(fs.readFileSync(CONFIG_PATH).toString());
  }
};


// Constants

const LOGGER = printit({ prefix: 'Cozy Light' });
const HOME = pathExtra.join(pathExtra.homedir(), '.cozy-light');
const CONFIG_PATH = pathExtra.join(HOME, 'config.json');
const DEFAULT_PORT = 19104;


// "Global" variables

var routes = {}
var port = 18001;
var proxy = httpProxy.createProxyServer(/*{agent: new http.Agent()}*/);
var config = require(CONFIG_PATH);


// Create config file and folders and prepare PouchDB dependency.

configHelpers.createHome();
configHelpers.createConfigFile();
configHelpers.copyDependency('pouchdb');
configHelpers.copyDependency('search-index');


// CLI

program
  .version(pkg.version)

program
  .command('start')
  .description('run remote setup commands')
  .action(actions.start);

program
  .command('install <app>')
  .description('Add app to current Cozy Light')
  .action(actions.installApp);

program
  .command('uninstall <app>')
  .description('Remove app from current Cozy Light')
  .action(actions.uninstallApp);

program
  .command('display_config')
  .description('Display current config of Cozy Light')
  .action(actions.displayConfig);

program
  .command('*')
  .description('display help')
  .action(program.outputHelp);

program.parse(process.argv);


// If argumernts doesn't match any of the one set, it displays help.

if (!process.argv.slice(2).length) {
  program.outputHelp();
};


// Manage errors

process.on('uncaughtException', function (err) {
  console.log(err);
});
